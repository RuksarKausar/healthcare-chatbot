from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
import requests
import json

class ActionCheckSymptoms(Action):
    def name(self) -> Text:
        return "action_check_symptoms"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        # Get user message
        user_message = tracker.latest_message['text']
        user_language = tracker.get_slot('user_language') or 'english'
        
        # Simple symptom analysis (you can enhance with ML)
        symptoms = self.extract_symptoms(user_message)
        advice = self.get_health_advice(symptoms, user_language)
        
        dispatcher.utter_message(text=advice)
        
        return []

    def extract_symptoms(self, message: str) -> List[str]:
        # Simple keyword matching - enhance with NER
        symptom_keywords = {
            'fever': ['fever', 'рдмреБрдЦрд╛рд░', 'рддреЗрдЬ рдмреБрдЦрд╛рд░'],
            'headache': ['headache', 'head pain', 'рд╕рд┐рд░ рджрд░реНрдж'],
            'cough': ['cough', 'рдЦрд╛рдВрд╕реА'],
            'breathing': ['breathing', 'рд╕рд╛рдВрд╕', 'breath'],
        }
        
        found_symptoms = []
        for symptom, keywords in symptom_keywords.items():
            if any(keyword.lower() in message.lower() for keyword in keywords):
                found_symptoms.append(symptom)
        
        return found_symptoms

    def get_health_advice(self, symptoms: List[str], language: str) -> str:
        advice_db = {
            'english': {
                'fever': "ЁЯМбя╕П For fever: Rest, drink fluids, take paracetamol. See doctor if >3 days.",
                'headache': "ЁЯТК For headache: Rest in dark room, drink water. Consult doctor if severe.",
                'cough': "ЁЯШ╖ For cough: Warm water, honey, avoid cold. See doctor if persistent.",
                'default': "ЁЯПе Please consult a healthcare professional for proper diagnosis."
            },
            'hindi': {
                'fever': "ЁЯМбя╕П рдмреБрдЦрд╛рд░ рдХреЗ рд▓рд┐рдП: рдЖрд░рд╛рдо рдХрд░реЗрдВ, рдкрд╛рдиреА рдкрд┐рдПрдВ, рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рд▓реЗрдВред 3 рджрд┐рди рд╕реЗ рдЬреНрдпрд╛рджрд╛ рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рдХреЛ рджрд┐рдЦрд╛рдПрдВред",
                'headache': "ЁЯТК рд╕рд┐рд░ рджрд░реНрдж рдХреЗ рд▓рд┐рдП: рдЕрдВрдзреЗрд░реЗ рдореЗрдВ рдЖрд░рд╛рдо рдХрд░реЗрдВ, рдкрд╛рдиреА рдкрд┐рдПрдВред рддреЗрдЬ рджрд░реНрдж рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред",
                'cough': "ЁЯШ╖ рдЦрд╛рдВрд╕реА рдХреЗ рд▓рд┐рдП: рдЧрд░реНрдо рдкрд╛рдиреА, рд╢рд╣рдж рд▓реЗрдВ, рдардВрдбрд╛ рди рдЦрд╛рдПрдВред рд▓рдЧрд╛рддрд╛рд░ рдЦрд╛рдВрд╕реА рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рдХреЛ рджрд┐рдЦрд╛рдПрдВред",
                'default': "ЁЯПе рдХреГрдкрдпрд╛ рд╕рд╣реА рдЬрд╛рдВрдЪ рдХреЗ рд▓рд┐рдП рдХрд┐рд╕реА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд░реНрдордЪрд╛рд░реА рд╕реЗ рдорд┐рд▓реЗрдВред"
            }
        }
        
        if not symptoms:
            return advice_db.get(language, advice_db['english'])['default']
        
        advice_text = ""
        for symptom in symptoms:
            advice_text += advice_db.get(language, advice_db['english']).get(symptom, "") + "\n"
        
        return advice_text or advice_db.get(language, advice_db['english'])['default']


class ActionVaccinationSchedule(Action):
    def name(self) -> Text:
        return "action_vaccination_schedule"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        user_language = tracker.get_slot('user_language') or 'english'
        
        schedules = {
            'english': """
ЁЯУЕ **Vaccination Schedule**:
ЁЯС╢ **Birth**: BCG, Hepatitis B
ЁЯН╝ **6 weeks**: DPT-1, OPV-1, Rotavirus-1
ЁЯУН **10 weeks**: DPT-2, OPV-2, Rotavirus-2
ЁЯОп **14 weeks**: DPT-3, OPV-3, Rotavirus-3
ЁЯУК **9 months**: Measles-1
ЁЯОВ **15 months**: MMR, DPT Booster-1
            """,
            'hindi': """
ЁЯУЕ **рдЯреАрдХрд╛рдХрд░рдг рдХрд╛рд░реНрдпрдХреНрд░рдо**:
ЁЯС╢ **рдЬрдиреНрдо рдХреЗ рд╕рдордп**: BCG, рд╣реЗрдкреЗрдЯрд╛рдЗрдЯрд┐рд╕ B
ЁЯН╝ **6 рд╕рдкреНрддрд╛рд╣**: DPT-1, OPV-1, рд░реЛрдЯрд╛рд╡рд╛рдпрд░рд╕-1  
ЁЯУН **10 рд╕рдкреНрддрд╛рд╣**: DPT-2, OPV-2, рд░реЛрдЯрд╛рд╡рд╛рдпрд░рд╕-2
ЁЯОп **14 рд╕рдкреНрддрд╛рд╣**: DPT-3, OPV-3, рд░реЛрдЯрд╛рд╡рд╛рдпрд░рд╕-3
ЁЯУК **9 рдорд╣реАрдиреЗ**: рдЦрд╕рд░рд╛-1
ЁЯОВ **15 рдорд╣реАрдиреЗ**: MMR, DPT рдмреВрд╕реНрдЯрд░-1
            """
        }
        
        schedule_text = schedules.get(user_language, schedules['english'])
        dispatcher.utter_message(text=schedule_text)
        
        return []


class ActionGetDiseaseInfo(Action):
    def name(self) -> Text:
        return "action_get_disease_info"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        disease = next(tracker.get_latest_entity_values("disease"), None)
        user_language = tracker.get_slot('user_language') or 'english'
        
        if disease:
            info = self.get_disease_info(disease.lower(), user_language)
            dispatcher.utter_message(text=info)
        else:
            msg = "Please specify which disease you want to know about." if user_language == 'english' else "рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдк рдХрд┐рд╕ рдмреАрдорд╛рд░реА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред"
            dispatcher.utter_message(text=msg)
        
        return []

    def get_disease_info(self, disease: str, language: str) -> str:
        # Disease information database
        disease_db = {
            'english': {
                'diabetes': "ЁЯй║ **Diabetes**: High blood sugar. Prevention: healthy diet, exercise, weight control.",
                'malaria': "ЁЯжЯ **Malaria**: Mosquito-borne disease. Prevention: mosquito nets, eliminate standing water.",
                'dengue': "ЁЯМбя╕П **Dengue**: Viral fever from mosquitoes. Prevention: clean surroundings, no water stagnation."
            },
            'hindi': {
                'diabetes': "ЁЯй║ **рдордзреБрдореЗрд╣**: рдЦреВрди рдореЗрдВ рдЪреАрдиреА рдХреА рдорд╛рддреНрд░рд╛ рдмрдврд╝рдирд╛ред рдмрдЪрд╛рд╡: рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░, рд╡реНрдпрд╛рдпрд╛рдо, рд╡рдЬрди рдирд┐рдпрдВрддреНрд░рдгред",
                'malaria': "ЁЯжЯ **рдорд▓реЗрд░рд┐рдпрд╛**: рдордЪреНрдЫрд░ рд╕реЗ рдлреИрд▓рдиреЗ рд╡рд╛рд▓реА рдмреАрдорд╛рд░реАред рдмрдЪрд╛рд╡: рдордЪреНрдЫрд░рджрд╛рдиреА, рдкрд╛рдиреА рди рдЬрдордиреЗ рджреЗрдВред",
                'dengue': "ЁЯМбя╕П **рдбреЗрдВрдЧреВ**: рдордЪреНрдЫрд░ рд╕реЗ рдлреИрд▓рдиреЗ рд╡рд╛рд▓рд╛ рд╡рд╛рдпрд░рд▓ рдмреБрдЦрд╛рд░ред рдмрдЪрд╛рд╡: рд╕рд╛рдл-рд╕рдлрд╛рдИ, рдкрд╛рдиреА рди рдЬрдорд╛рдПрдВред"
            }
        }
        
        return disease_db.get(language, disease_db['english']).get(disease, 
            "Information not available. Please consult a healthcare professional." if language == 'english' 
            else "рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред рдХреГрдкрдпрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд░реНрдордЪрд╛рд░реА рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред")